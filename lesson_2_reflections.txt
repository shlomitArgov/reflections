Q: What happens when you initialize a repository? Why do you need to do it?

A: A .git folder is created in the location where "git init" was run. Files in the folder are not yet tracked at this point, but can be added to the repository for tracking.


Q: How is the staging area different from the working directory and the repository? What value do you think it offers?

A: The staging area is tracked, unlike the working directory. It is also editable, unlike the repository, so it's possible to change it until a point in time where we want to perform a commit and save a specific version of the files in it.


Q: How can you use the staging area to make sure you have one commit per logical change?

A: You can perform changes in the staging area and once you're ready to commit, you can decide to treat different changes as components of separate commits, based on the logical unit you regard as the commit.


Q: What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A: When trying out new features, it could be useful to do it on a separate branch rather than on the main branch. That way, development of the main branch is not affected by experimental code that could break it.


Q: How do the diagrams help you visualize the branch structure?

A: They show the relation between "parent commit" and commit, providing a visual representation of the path of commits that can be traversed for a given commit.


Q: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

A: A single branch with all previous commits sorted by timestamp. It is represented in the diagram as two branches merging into a single branch because this reflects the process in which the merged branch was created.


Q: What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

A: Pros: Automatic merging saves time and effort for the developer in most cases (when automatic merge can be easily inferred).
   Cons: Automatic merging can make it so refactoring that might be a good idea when merging branches is not noticeable by the merging developer.